#region License notice

/*
  This file is part of the Ceres project at https://github.com/dje-dev/ceres.
  Copyright (C) 2020- by David Elliott and the Ceres Authors.

  Ceres is free software under the terms of the GNU General Public License v3.0.
  You should have received a copy of the GNU General Public License
  along with Ceres. If not, see <http://www.gnu.org/licenses/>.
*/

#endregion

#region License

/* 
License Note
   
This code originated from Github repository from Judd Niemann
and is licensed with the MIT License.

This version is modified by David Elliott, including a translation to C# and 
some moderate modifications to improve performance and modularity.
*/

/*

MIT License

Copyright(c) 2016-2017 Judd Niemann

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files(the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions :

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
#endregion

#region Using directives

using System;
using System.Numerics;
using System.Runtime.CompilerServices;
using BitBoard = System.UInt64;

#endregion

namespace Ceres.Chess.MoveGen
{
  public static class QBBoperations
  {
    // Find the most significant bit
    public static ulong MSB(ulong bb) => 63UL ^ (ulong)BitOperations.LeadingZeroCount(bb);

    // Find the least significant bit
    public static ulong LSB(ulong bb) => (ulong)BitOperations.TrailingZeroCount(bb);

    public static bool CanBlackKingMoveToCastlingPos(in MGPosition pos, int kingSq, int rookSq, int startSquare, int endSquare, bool moveLeft)
    {
      BitBoard rook = 1UL << rookSq;
      BitBoard maskRook = ~rook;
      //remove the rook from the board
      BitBoard A = pos.A & maskRook;
      BitBoard B = pos.B & maskRook;
      BitBoard C = pos.C & maskRook;
      BitBoard D = pos.D & maskRook;

      BitBoard kingStart = 1UL << kingSq;
      BitBoard moveKing = moveLeft ? kingStart << 1 : kingStart >> 1;

      int start = startSquare;
      int end = endSquare;
      while (end >= start)
      {
        bool inCheck = MGMoveGen.IsBlackInCheck(A, B, C, D);
        if (inCheck)
        {
          return false;
        }

        BitBoard mask = ~kingStart;
        kingStart = moveKing;

        // Apply the mask to each bitboard
        A = (A & mask) | moveKing;
        B = (B & mask) | moveKing;
        C = (C & mask) | moveKing;
        D = (D & mask) | moveKing;
        moveKing = moveLeft ? kingStart << 1 : kingStart >> 1;
        start++;
      }

      return true;
    }
   
    public static bool CanWhiteKingMoveToCastlingPos(in MGPosition pos, int kingSq, int rookSq, int startSquare, int endSquare, bool moveLeft)
    {
      BitBoard rook = 1UL << rookSq;
      BitBoard maskRook = ~rook;

      //remove the rook from the board
      BitBoard A = pos.A & maskRook;
      BitBoard B = pos.B & maskRook;
      BitBoard C = pos.C & maskRook;
      BitBoard D = pos.D;

      BitBoard whitePieces = (A | B | C) & ~D;
      BitBoard kingStart = 1UL << kingSq;
      BitBoard moveKing = moveLeft ? kingStart << 1 : kingStart >> 1;

      int start = startSquare;
      int end = endSquare;
      while (end >= start)
      {
        bool inCheck = MGMoveGen.IsWhiteInCheck(A, B, C, D);
        if (inCheck)
        {
          return false;
        }

        BitBoard mask = ~kingStart;
        kingStart = moveKing;

        // Apply the mask to each bitboard
        A = (A & mask) | moveKing;
        B = (B & mask) | moveKing;
        C = (C & mask) | moveKing;

        moveKing = moveLeft ? kingStart << 1 : kingStart >> 1;
        start++;
      }

      return true;
    }

    public static bool CanBlackKingReachLongRook(in MGPosition pos, out ulong rookPos)
    {
      BitBoard occ = pos.A | pos.B | pos.C;
      BitBoard bKing = (pos.D & pos.C & pos.B & pos.A) & MGPositionConstants.lastRank;
      BitBoard bRooks = (pos.D & pos.C & ~pos.B & ~pos.A) & MGPositionConstants.lastRank;
      int kingSq = (int)LSB(bKing);
      int rookSq = pos.BlackQRInitPlacement;
      BitBoard rookBitBoard = 1UL << rookSq;
      bool rookAtStartSquare = (bRooks & rookBitBoard) != 0;
      rookPos = 1UL << rookSq;

      if (bKing == 0 || bRooks == 0UL || kingSq > rookSq || !rookAtStartSquare )
      {
        return false;
      }

      BitBoard occRow8WithoutKingAndRook = occ & MGPositionConstants.lastRank & ~(1UL << kingSq | 1UL << rookSq);
      BitBoard v = MGPositionConstants.LongRookKingMaskBlack[rookSq - 56, kingSq - 56];
      BitBoard canCastle = v & occRow8WithoutKingAndRook;

      if (canCastle == 0UL)
      {
        bool result;
        if (kingSq > 61)
        {
          result = CanBlackKingMoveToCastlingPos(pos, kingSq, rookSq, 61, kingSq, false);
        }
        else
        {
          result = CanBlackKingMoveToCastlingPos(pos, kingSq, rookSq, kingSq, 61, true);
        }

        return result;
      }

      return false;
    }

    public static bool CanWhiteKingReachLongRook(in MGPosition pos, out ulong rookPos)
    {
      BitBoard occ = pos.A | pos.B | pos.C;
      BitBoard wRooks = (~pos.D & pos.C & ~pos.B & ~pos.A) & MGPositionConstants.firstRank;
      BitBoard wKing = (~pos.D & pos.C & pos.B & pos.A) & MGPositionConstants.firstRank;
      int kingSq = (int)LSB(wKing);
      int rookSq = pos.WhiteQRInitPlacement;
      BitBoard rookBitBoard = 1UL << rookSq;
      bool rookAtStartSquare = (wRooks & rookBitBoard) != 0;      
      rookPos = 1UL << rookSq;

      if (wKing == 0 || wRooks == 0UL || kingSq > rookSq || !rookAtStartSquare )
      {
        return false;
      }

      BitBoard occRow1WithoutKingAndRook = occ & MGPositionConstants.firstRank & ~(1UL << kingSq | 1UL << rookSq);
      BitBoard v = MGPositionConstants.LongRookKingMask[rookSq, kingSq];
      BitBoard canCastle = v & occRow1WithoutKingAndRook;

      if (canCastle == 0UL)
      {
        bool result;
        if (kingSq > 5)
        {
          result = CanWhiteKingMoveToCastlingPos(pos, kingSq, rookSq, 5, kingSq, false);
        }
        else
        {
          result = CanWhiteKingMoveToCastlingPos(pos, kingSq, rookSq, kingSq, 5, true);
        }
        return result;
      }
      return false;

    }

    public static bool CanBlackKingReachShortRook(in MGPosition pos, out ulong rookPos)
    {
      BitBoard bKing = (pos.D & pos.C & pos.B & pos.A) & MGPositionConstants.lastRank;
      BitBoard bRooks = (pos.D & pos.C & ~pos.B & ~pos.A) & MGPositionConstants.lastRank;
      int kingSq = (int)LSB(bKing);
      int rookSq = pos.BlackKRInitPlacement;
      BitBoard rookBitBoard = 1UL << rookSq;
      bool rookAtStartSquare = (bRooks & rookBitBoard) != 0;     
      rookPos = 1UL << rookSq;

      if (bKing == 0 || bRooks == 0UL || kingSq < rookSq || !rookAtStartSquare)
      {
        return false;
      }

      BitBoard occ = pos.A | pos.B | pos.C;
      BitBoard occRow1WithoutKingAndRook = occ & MGPositionConstants.lastRank & ~(1UL << kingSq | 1UL << rookSq);
      BitBoard v = MGPositionConstants.ShortRookKingMaskBlack[rookSq - 56, kingSq - 56];
      BitBoard canCastle = v & occRow1WithoutKingAndRook;

      if (canCastle == 0UL)
      {
        bool result = CanBlackKingMoveToCastlingPos(pos, kingSq, rookSq, 57, kingSq, false);
        return result;
      }

      return false;
    }

    public static bool CanWhiteKingReachShortRook(in MGPosition pos, out ulong rookPos)
    {
      BitBoard occ = pos.A | pos.B | pos.C;
      BitBoard wKing = (~pos.D & pos.C & pos.B & pos.A) & MGPositionConstants.firstRank; // pos.B & pos.C; //GetKings(pos.A, pos.B, pos.C, pos.D);
      BitBoard wRooks = (~pos.D & pos.C & ~pos.B & ~pos.A) & MGPositionConstants.firstRank;
      int kingSq = (int)LSB(wKing);
      int rookSq = pos.WhiteKRInitPlacement; //(int)(LSB(wRooks));
      BitBoard rookBitBoard = 1UL << rookSq;
      bool rookAtStartSquare = (wRooks & rookBitBoard) != 0;
      rookPos = 1UL << rookSq;

      if (wKing == 0 || wRooks == 0UL || kingSq < rookSq || !rookAtStartSquare)
      {
        return false;
      }

      BitBoard occRow1WithoutKingAndRook = occ & MGPositionConstants.firstRank & ~(1UL << (kingSq) | 1UL << (rookSq));
      BitBoard v = MGPositionConstants.ShortRookKingMask[rookSq, kingSq];
      BitBoard canCastle = v & occRow1WithoutKingAndRook;
      if (canCastle == 0UL)
      {
        return CanWhiteKingMoveToCastlingPos(pos, kingSq, rookSq, 1, kingSq, false);
      }

      return false;
    }
  }

  public static class MGPositionConstants
  {
    /// <summary>
    /// Temporary global static indicator if this Ceres engine process is in Chess960 mode.
    /// TODO: To be replaced with context sensitive variables.
    /// </summary>
    public static bool IsChess960 = false;

    public const int MOVELIST_SIZE = 128;

    public const int CHECKMATE = 9999;
    public const int STALEMATE = -1;

    public const byte WPAWN = 1;
    public const byte WBISHOP = 2;
    public const byte WENPASSANT = 3;
    public const byte WROOK = 4;
    public const byte WKNIGHT = 5;
    public const byte WQUEEN = 6;
    public const byte WKING = 7;

    public const byte BPAWN = 9;
    public const byte BBISHOP = 10;
    public const byte BENPASSANT = 11;
    public const byte BROOK = 12;
    public const byte BKNIGHT = 13;
    public const byte BQUEEN = 14;
    public const byte BKING = 15;

    [Flags]
    public enum MCChessPositionPieceEnum : byte
    {
      None = 0,
      WhitePawn = WPAWN,
      WhiteBishop = WBISHOP,
      WhiteEnPassant = WENPASSANT,
      WhiteRook = WROOK,
      WhiteKnight = WKNIGHT,
      WhiteQueen = WQUEEN,
      WhiteKing = WKING,

      Unused = 8,
      BlackPawn = BPAWN,
      BlackBishop = BBISHOP,
      BlackEnPassant = BENPASSANT,
      BlackRook = BROOK,
      BlackKnight = BKNIGHT,
      BlackQueen = BQUEEN,
      BlackKing = BKING,
    }


    internal const ulong RANK1 = 0x00000000000000ff;
    internal const ulong RANK2 = 0x000000000000ff00;
    internal const ulong RANK3 = 0x0000000000ff0000;
    internal const ulong RANK4 = 0x00000000ff000000;
    internal const ulong RANK5 = 0x000000ff00000000;
    internal const ulong RANK6 = 0x0000ff0000000000;
    internal const ulong RANK7 = 0x00ff000000000000;
    internal const ulong RANK8 = 0xff00000000000000;

    internal const ulong FILEA = 0x8080808080808080;
    internal const ulong FILEB = 0x4040404040404040;
    internal const ulong FILEC = 0x2020202020202020;
    internal const ulong FILED = 0x1010101010101010;
    internal const ulong FILEE = 0x0808080808080808;
    internal const ulong FILEF = 0x0404040404040404;
    internal const ulong FILEG = 0x0202020202020202;
    internal const ulong FILEH = 0x0101010101010101;

    internal const ulong A1 = 0x0000000000000080;
    internal const ulong B1 = 0x0000000000000040;
    internal const ulong C1 = 0x0000000000000020;
    internal const ulong D1 = 0x0000000000000010;
    internal const ulong E1 = 0x0000000000000008;
    internal const ulong F1 = 0x0000000000000004;
    internal const ulong G1 = 0x0000000000000002;
    internal const ulong H1 = 0x0000000000000001;
    internal const ulong D4 = 0x0000000010000000;
    internal const ulong E4 = 0x0000000008000000;
    internal const ulong D5 = 0x0000000100000000;
    internal const ulong E5 = 0x0000000080000000;
    internal const ulong A8 = 0x8000000000000000;
    internal const ulong B8 = 0x4000000000000000;
    internal const ulong C8 = 0x2000000000000000;
    internal const ulong D8 = 0x1000000000000000;
    internal const ulong E8 = 0x0800000000000000;
    internal const ulong F8 = 0x0400000000000000;
    internal const ulong G8 = 0x0200000000000000;
    internal const ulong H8 = 0x0100000000000000;


    internal const ulong RIM = 0xff818181818181ff;
    internal const ulong UPPER_CENTRE = 0x0000001800000000;
    internal const ulong LOWER_CENTRE = 0x0000000018000000;

    internal const ulong WHITECASTLEZONE = 0x0000000000000006;
    internal const ulong BLACKCASTLEZONE = 0x0600000000000000;
    internal const ulong WHITECASTLELONGZONE = 0x0000000000000070;
    internal const ulong BLACKCASTLELONGZONE = 0x7000000000000000;
    internal const ulong WHITEOUTPOSTZONE = 0x0000ffffff000000;
    internal const ulong BLACKOUTPOSTZONE = 0x000000ffffff0000;

    internal const ulong WHITEQRPOS = 0x0000000000000080;
    internal const ulong WHITEQNPOS = 0x0000000000000040;
    internal const ulong WHITEQBPOS = 0x0000000000000020;
    internal const ulong WHITEQUEENPOS = 0x0000000000000010;
    internal const ulong WHITEKINGPOS = 0x0000000000000008;
    internal const ulong WHITEKBPOS = 0x0000000000000004;
    internal const ulong WHITEKNPOS = 0x0000000000000002;
    internal const ulong WHITEKRPOS = 0x0000000000000001;

    internal const ulong BLACKQRPOS = 0x8000000000000000;
    internal const ulong BLACKQNPOS = 0x4000000000000000;
    internal const ulong BLACKQBPOS = 0x2000000000000000;
    internal const ulong BLACKQUEENPOS = 0x1000000000000000;
    internal const ulong BLACKKINGPOS = 0x0800000000000000;
    internal const ulong BLACKKBPOS = 0x0400000000000000;
    internal const ulong BLACKKNPOS = 0x0200000000000000;
    internal const ulong BLACKKRPOS = 0x0100000000000000;

    internal static ulong LEFTMASK = 0xfefefefefefefefe;
    internal static ulong RIGHTMASK = 0x7f7f7f7f7f7f7f7f;

    internal static BitBoard[] MoveUp;
    internal static BitBoard[] MoveUpRight;
    internal static BitBoard[] MoveRight;
    internal static BitBoard[] MoveDownRight;
    internal static BitBoard[] MoveDown;
    internal static BitBoard[] MoveDownLeft;
    internal static BitBoard[] MoveLeft;
    internal static BitBoard[] MoveUpLeft;

    internal static BitBoard[] MoveKnight1;
    internal static BitBoard[] MoveKnight2;
    internal static BitBoard[] MoveKnight3;
    internal static BitBoard[] MoveKnight4;
    internal static BitBoard[] MoveKnight5;
    internal static BitBoard[] MoveKnight6;
    internal static BitBoard[] MoveKnight7;
    internal static BitBoard[] MoveKnight8;


    internal static int[] MoveUpSquareIndex;
    internal static int[] MoveUpRightSquareIndex;
    internal static int[] MoveRightSquareIndex;
    internal static int[] MoveDownRightSquareIndex;
    internal static int[] MoveDownSquareIndex;
    internal static int[] MoveDownLeftSquareIndex;
    internal static int[] MoveLeftSquareIndex;
    internal static int[] MoveUpLeftSquareIndex;
    internal static int[] MoveKnight1SquareIndex;
    internal static int[] MoveKnight2SquareIndex;
    internal static int[] MoveKnight3SquareIndex;
    internal static int[] MoveKnight4SquareIndex;
    internal static int[] MoveKnight5SquareIndex;
    internal static int[] MoveKnight6SquareIndex;
    internal static int[] MoveKnight7SquareIndex;

    internal static int[] MoveKnight8SquareIndex;

    public const ulong firstRank = 0x00000000000000FFUL;
    public const ulong lastRank = 0xFF00000000000000UL;

    //rook, king
    public static readonly ulong[,] ShortRookKingMask = {
      { 0, 7, 7, 15, 31, 63, 127, 0 },
      { 0, 0, 6, 14, 30, 62, 126, 0 },
      { 0, 0, 0, 14, 30, 62, 126, 0 },
      { 0, 0, 0, 0, 30, 62, 126, 0 },
      { 0, 0, 0, 0, 0, 62, 126, 0 },
      { 0, 0, 0, 0, 0, 0, 126, 0 },
      { 0, 0, 0, 0, 0, 0, 0, 0 },
      { 0, 0, 0, 0, 0, 0, 0, 0 },
    };

    public static readonly ulong[,] ShortRookKingMaskBlack = {
      { 0, 504403158265495552, 504403158265495552, 1080863910568919040, 2233785415175766016, 4539628424389459968, 9151314442816847872, 0 },
      { 0, 0, 432345564227567616, 1008806316530991104, 2161727821137838080, 4467570830351532032, 9079256848778919936, 0 },
      { 0, 0, 0, 1008806316530991104, 2161727821137838080, 4467570830351532032, 9079256848778919936, 0 },
      { 0, 0, 0, 0, 2161727821137838080, 4467570830351532032, 9079256848778919936, 0 },
      { 0, 0, 0, 0, 0, 4467570830351532032, 9079256848778919936, 0 },
      { 0, 0, 0, 0, 0, 0, 9079256848778919936, 0 },
      { 0, 0, 0, 0, 0, 0, 0, 0 },
      { 0, 0, 0, 0, 0, 0, 0, 0 },
    };


    //rook, king
    public static readonly ulong[,] LongRookKingMask = {
        { 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 62, 0, 0, 0, 0, 0, 0 },
        { 0, 62, 60, 0, 0, 0, 0, 0 },
        { 0, 62, 60, 56, 0, 0, 0, 0 },
        { 0, 62, 60, 56, 48, 0, 0, 0 },
        { 0, 126, 124, 120, 112, 112, 0, 0 },
        { 0, 254, 252, 248, 240, 240, 240, 0 }
    };

    public static readonly ulong[,] LongRookKingMaskBlack = {
        { 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 4467570830351532032, 0, 0, 0, 0, 0, 0 },
        { 0, 4467570830351532032, 4323455642275676160, 0, 0, 0, 0, 0 },
        { 0, 4467570830351532032, 4323455642275676160, 4035225266123964416, 0, 0, 0, 0 },
        { 0, 4467570830351532032, 4323455642275676160, 4035225266123964416, 3458764513820540928, 0, 0, 0 },
        { 0, 9079256848778919936, 8935141660703064064, 8646911284551352320, 8070450532247928832, 8070450532247928832, 0, 0 },
        { 0, 18302628885633695744, 18158513697557839872, 17870283321406128128, 17293822569102704640, 17293822569102704640, 17293822569102704640, 0 }
    };

    [ModuleInitializer]
    internal static void ClassInitialize()
    {
      MoveUp = new BitBoard[]{
  0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x0000000000000800, 0x00000000001000, 0x0000000000002000, 0x0000000000004000, 0x0000000000008000,
  0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x00000000100000, 0x0000000000200000, 0x0000000000400000, 0x0000000000800000,
  0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x00000010000000, 0x0000000020000000, 0x0000000040000000, 0x0000000080000000,
  0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x00001000000000, 0x0000002000000000, 0x0000004000000000, 0x0000008000000000,
  0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x00100000000000, 0x0000200000000000, 0x0000400000000000, 0x0000800000000000,
  0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x0008000000000000, 0x10000000000000, 0x0020000000000000, 0x0040000000000000, 0x0080000000000000,
  0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000
};

      MoveUpRight = new BitBoard[] {
  000000000000000000, 0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x00000000000800, 0x0000000000001000, 0x0000000000002000, 0x0000000000004000,
  000000000000000000, 0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x00000000080000, 0x0000000000100000, 0x0000000000200000, 0x0000000000400000,
  000000000000000000, 0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x00000008000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000,
  000000000000000000, 0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x00000800000000, 0x0000001000000000, 0x0000002000000000, 0x0000004000000000,
  000000000000000000, 0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x00080000000000, 0x0000100000000000, 0x0000200000000000, 0x0000400000000000,
  000000000000000000, 0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x08000000000000, 0x0010000000000000, 0x0020000000000000, 0x0040000000000000,
  000000000000000000, 0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000,
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000
};
      MoveRight = new BitBoard[]{
  000000000000000000, 0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x00000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040,
  000000000000000000, 0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x00000000000800, 0x0000000000001000, 0x0000000000002000, 0x0000000000004000,
  000000000000000000, 0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x00000000080000, 0x0000000000100000, 0x0000000000200000, 0x0000000000400000,
  000000000000000000, 0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x00000008000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000,
  000000000000000000, 0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x00000800000000, 0x0000001000000000, 0x0000002000000000, 0x0000004000000000,
  000000000000000000, 0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x00080000000000, 0x0000100000000000, 0x0000200000000000, 0x0000400000000000,
  000000000000000000, 0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x08000000000000, 0x0010000000000000, 0x0020000000000000, 0x0040000000000000,
  000000000000000000, 0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000
};
      MoveDownRight = new BitBoard[]{
        000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
  000000000000000000, 0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x00000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040,
  000000000000000000, 0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x00000000000800, 0x0000000000001000, 0x0000000000002000, 0x0000000000004000,
  000000000000000000, 0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x00000000080000, 0x0000000000100000, 0x0000000000200000, 0x0000000000400000,
  000000000000000000, 0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x00000008000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000,
  000000000000000000, 0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x00000800000000, 0x0000001000000000, 0x0000002000000000, 0x0000004000000000,
  000000000000000000, 0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x00080000000000, 0x0000100000000000, 0x0000200000000000, 0x0000400000000000,
  000000000000000000, 0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x08000000000000, 0x0010000000000000, 0x0020000000000000, 0x0040000000000000
};

      MoveDown = new BitBoard[]{
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
  0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x00000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080,
  0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x0000000000000800, 0x00000000001000, 0x0000000000002000, 0x0000000000004000, 0x0000000000008000,
  0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x00000000100000, 0x0000000000200000, 0x0000000000400000, 0x0000000000800000,
  0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x00000010000000, 0x0000000020000000, 0x0000000040000000, 0x0000000080000000,
  0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x00001000000000, 0x0000002000000000, 0x0000004000000000, 0x0000008000000000,
  0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x00100000000000, 0x0000200000000000, 0x0000400000000000, 0x0000800000000000,
  0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x0008000000000000, 0x10000000000000, 0x0020000000000000, 0x0040000000000000, 0x0080000000000000
};
      MoveDownLeft = new BitBoard[]{
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
  0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x00000000000020, 0x0000000000000040, 0x0000000000000080, 000000000000000000,
  0x0000000000000200, 0x0000000000000400, 0x0000000000000800, 0x0000000000001000, 0x00000000002000, 0x0000000000004000, 0x0000000000008000, 000000000000000000,
  0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x00000000200000, 0x0000000000400000, 0x0000000000800000, 000000000000000000,
  0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x00000020000000, 0x0000000040000000, 0x0000000080000000, 000000000000000000,
  0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x00002000000000, 0x0000004000000000, 0x0000008000000000, 000000000000000000,
  0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x00200000000000, 0x0000400000000000, 0x0000800000000000, 000000000000000000,
  0x0002000000000000, 0x0004000000000000, 0x0008000000000000, 0x0010000000000000, 0x20000000000000, 0x0040000000000000, 0x0080000000000000, 000000000000000000
};

      MoveLeft = new BitBoard[]{
  0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x00000000000020, 0x0000000000000040, 0x0000000000000080, 000000000000000000,
  0x0000000000000200, 0x0000000000000400, 0x0000000000000800, 0x0000000000001000, 0x00000000002000, 0x0000000000004000, 0x0000000000008000, 000000000000000000,
  0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x00000000200000, 0x0000000000400000, 0x0000000000800000, 000000000000000000,
  0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x00000020000000, 0x0000000040000000, 0x0000000080000000, 000000000000000000,
  0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x00002000000000, 0x0000004000000000, 0x0000008000000000, 000000000000000000,
  0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x00200000000000, 0x0000400000000000, 0x0000800000000000, 000000000000000000,
  0x0002000000000000, 0x0004000000000000, 0x0008000000000000, 0x0010000000000000, 0x20000000000000, 0x0040000000000000, 0x0080000000000000, 000000000000000000,
  0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 000000000000000000
};

      MoveUpLeft = new BitBoard[]{
  0x0000000000000200, 0x0000000000000400, 0x0000000000000800, 0x0000000000001000, 0x00000000002000, 0x0000000000004000, 0x0000000000008000, 000000000000000000,
  0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x00000000200000, 0x0000000000400000, 0x0000000000800000, 000000000000000000,
  0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x00000020000000, 0x0000000040000000, 0x0000000080000000, 000000000000000000,
  0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x00002000000000, 0x0000004000000000, 0x0000008000000000, 000000000000000000,
  0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x00200000000000, 0x0000400000000000, 0x0000800000000000, 000000000000000000,
  0x0002000000000000, 0x0004000000000000, 0x0008000000000000, 0x0010000000000000, 0x20000000000000, 0x0040000000000000, 0x0080000000000000, 000000000000000000,
  0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 000000000000000000,
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000
};

      MoveKnight1 = new BitBoard[]{
  000000000000000000, 0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x00000000080000, 0x0000000000100000, 0x0000000000200000, 0x0000000000400000,
  000000000000000000, 0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x00000008000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000,
  000000000000000000, 0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x00000800000000, 0x0000001000000000, 0x0000002000000000, 0x0000004000000000,
  000000000000000000, 0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x00080000000000, 0x0000100000000000, 0x0000200000000000, 0x0000400000000000,
  000000000000000000, 0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x08000000000000, 0x0010000000000000, 0x0020000000000000, 0x0040000000000000,
  000000000000000000, 0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000,
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000
};

      MoveKnight2 = new BitBoard[]{
  000000000000000000, 000000000000000000, 0x0000000000000100, 0x0000000000000200, 0x00000000000400, 0x0000000000000800, 0x0000000000001000, 0x0000000000002000,
  000000000000000000, 000000000000000000, 0x0000000000010000, 0x0000000000020000, 0x00000000040000, 0x0000000000080000, 0x0000000000100000, 0x0000000000200000,
  000000000000000000, 000000000000000000, 0x0000000001000000, 0x0000000002000000, 0x00000004000000, 0x0000000008000000, 0x0000000010000000, 0x0000000020000000,
  000000000000000000, 000000000000000000, 0x0000000100000000, 0x0000000200000000, 0x00000400000000, 0x0000000800000000, 0x0000001000000000, 0x0000002000000000,
  000000000000000000, 000000000000000000, 0x0000010000000000, 0x0000020000000000, 0x00040000000000, 0x0000080000000000, 0x0000100000000000, 0x0000200000000000,
  000000000000000000, 000000000000000000, 0x0001000000000000, 0x0002000000000000, 0x04000000000000, 0x0008000000000000, 0x0010000000000000, 0x0020000000000000,
  000000000000000000, 000000000000000000, 0x0100000000000000, 0x0200000000000000, 0x400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000,
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000
};

      MoveKnight3 = new BitBoard[]{
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
  000000000000000000, 000000000000000000, 0x0000000000000001, 0x0000000000000002, 0x00000000000004, 0x0000000000000008, 0x0000000000000010, 0x0000000000000020,
  000000000000000000, 000000000000000000, 0x0000000000000100, 0x0000000000000200, 0x00000000000400, 0x0000000000000800, 0x0000000000001000, 0x0000000000002000,
  000000000000000000, 000000000000000000, 0x0000000000010000, 0x0000000000020000, 0x00000000040000, 0x0000000000080000, 0x0000000000100000, 0x0000000000200000,
  000000000000000000, 000000000000000000, 0x0000000001000000, 0x0000000002000000, 0x00000004000000, 0x0000000008000000, 0x0000000010000000, 0x0000000020000000,
  000000000000000000, 000000000000000000, 0x0000000100000000, 0x0000000200000000, 0x00000400000000, 0x0000000800000000, 0x0000001000000000, 0x0000002000000000,
  000000000000000000, 000000000000000000, 0x0000010000000000, 0x0000020000000000, 0x00040000000000, 0x0000080000000000, 0x0000100000000000, 0x0000200000000000,
  000000000000000000, 000000000000000000, 0x0001000000000000, 0x0002000000000000, 0x04000000000000, 0x0008000000000000, 0x0010000000000000, 0x0020000000000000
};

      MoveKnight4 = new BitBoard[]{
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
  000000000000000000, 0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x00000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040,
  000000000000000000, 0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x00000000000800, 0x0000000000001000, 0x0000000000002000, 0x0000000000004000,
  000000000000000000, 0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x00000000080000, 0x0000000000100000, 0x0000000000200000, 0x0000000000400000,
  000000000000000000, 0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x00000008000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000,
  000000000000000000, 0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x00000800000000, 0x0000001000000000, 0x0000002000000000, 0x0000004000000000,
  000000000000000000, 0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x00080000000000, 0x0000100000000000, 0x0000200000000000, 0x0000400000000000
};

      MoveKnight5 = new BitBoard[]{
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
  0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x00000000000020, 0x0000000000000040, 0x0000000000000080, 000000000000000000,
  0x0000000000000200, 0x0000000000000400, 0x0000000000000800, 0x0000000000001000, 0x00000000002000, 0x0000000000004000, 0x0000000000008000, 000000000000000000,
  0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x00000000200000, 0x0000000000400000, 0x0000000000800000, 000000000000000000,
  0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x00000020000000, 0x0000000040000000, 0x0000000080000000, 000000000000000000,
  0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x00002000000000, 0x0000004000000000, 0x0000008000000000, 000000000000000000,
  0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x00200000000000, 0x0000400000000000, 0x0000800000000000, 000000000000000000
};

      MoveKnight6 = new BitBoard[]{
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
  0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x0000000000000020, 0x00000000000040, 0x0000000000000080, 000000000000000000, 000000000000000000,
  0x0000000000000400, 0x0000000000000800, 0x0000000000001000, 0x0000000000002000, 0x00000000004000, 0x0000000000008000, 000000000000000000, 000000000000000000,
  0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x0000000000200000, 0x00000000400000, 0x0000000000800000, 000000000000000000, 000000000000000000,
  0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x0000000020000000, 0x00000040000000, 0x0000000080000000, 000000000000000000, 000000000000000000,
  0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x0000002000000000, 0x00004000000000, 0x0000008000000000, 000000000000000000, 000000000000000000,
  0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x0000200000000000, 0x00400000000000, 0x0000800000000000, 000000000000000000, 000000000000000000,
  0x0004000000000000, 0x0008000000000000, 0x0010000000000000, 0x0020000000000000, 0x40000000000000, 0x0080000000000000, 000000000000000000, 000000000000000000
};

      MoveKnight7 = new BitBoard[]{
  0x0000000000000400, 0x0000000000000800, 0x0000000000001000, 0x0000000000002000, 0x00000000004000, 0x0000000000008000, 000000000000000000, 000000000000000000,
  0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x0000000000200000, 0x00000000400000, 0x0000000000800000, 000000000000000000, 000000000000000000,
  0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x0000000020000000, 0x00000040000000, 0x0000000080000000, 000000000000000000, 000000000000000000,
  0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x0000002000000000, 0x00004000000000, 0x0000008000000000, 000000000000000000, 000000000000000000,
  0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x0000200000000000, 0x00400000000000, 0x0000800000000000, 000000000000000000, 000000000000000000,
  0x0004000000000000, 0x0008000000000000, 0x0010000000000000, 0x0020000000000000, 0x40000000000000, 0x0080000000000000, 000000000000000000, 000000000000000000,
  0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 000000000000000000, 000000000000000000,
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000
};

      MoveKnight8 = new BitBoard[]{
  0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x00000000200000, 0x0000000000400000, 0x0000000000800000, 000000000000000000,
  0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x00000020000000, 0x0000000040000000, 0x0000000080000000, 000000000000000000,
  0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x00002000000000, 0x0000004000000000, 0x0000008000000000, 000000000000000000,
  0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x00200000000000, 0x0000400000000000, 0x0000800000000000, 000000000000000000,
  0x0002000000000000, 0x0004000000000000, 0x0008000000000000, 0x0010000000000000, 0x20000000000000, 0x0040000000000000, 0x0080000000000000, 000000000000000000,
  0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 000000000000000000,
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
  000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 0000000000000000, 000000000000000000, 000000000000000000, 000000000000000000
};

      MoveUpSquareIndex = new int[]{
  8, 9, 10, 11, 12, 13, 14, 15,
  16, 17, 18, 19, 20, 21, 22, 23,
  24, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39,
  40, 41, 42, 43, 44, 45, 46, 47,
  48, 49, 50, 51, 52, 53, 54, 55,
  56, 57, 58, 59, 60, 61, 62, 63,
  56, 57, 58, 59, 60, 61, 62, 63
};

      MoveUpRightSquareIndex = new int[]{
  0, 8, 9, 10, 11, 12, 13, 14,
  8, 16, 17, 18, 19, 20, 21, 22,
  16, 24, 25, 26, 27, 28, 29, 30,
  24, 32, 33, 34, 35, 36, 37, 38,
  32, 40, 41, 42, 43, 44, 45, 46,
  40, 48, 49, 50, 51, 52, 53, 54,
  48, 56, 57, 58, 59, 60, 61, 62,
  56, 57, 58, 59, 60, 61, 62, 63
};

      MoveRightSquareIndex = new int[]{
  0, 0, 1, 2, 3, 4, 5, 6,
  8, 8, 9, 10, 11, 12, 13, 14,
  16, 16, 17, 18, 19, 20, 21, 22,
  24, 24, 25, 26, 27, 28, 29, 30,
  32, 32, 33, 34, 35, 36, 37, 38,
  40, 40, 41, 42, 43, 44, 45, 46,
  48, 48, 49, 50, 51, 52, 53, 54,
  56, 56, 57, 58, 59, 60, 61, 62
};

      MoveDownRightSquareIndex = new int[]{
  0, 1, 2, 3, 4, 5, 6, 7,
  8, 0, 1, 2, 3, 4, 5, 6,
  16, 8, 9, 10, 11, 12, 13, 14,
  24, 16, 17, 18, 19, 20, 21, 22,
  32, 24, 25, 26, 27, 28, 29, 30,
  40, 32, 33, 34, 35, 36, 37, 38,
  48, 40, 41, 42, 43, 44, 45, 46,
  56, 48, 49, 50, 51, 52, 53, 54
};

      MoveDownSquareIndex = new int[]{
  0, 1, 2, 3, 4, 5, 6, 7,
  0, 1, 2, 3, 4, 5, 6, 7,
  8, 9, 10, 11, 12, 13, 14, 15,
  16, 17, 18, 19, 20, 21, 22, 23,
  24, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39,
  40, 41, 42, 43, 44, 45, 46, 47,
  48, 49, 50, 51, 52, 53, 54, 55
};

      MoveDownLeftSquareIndex = new int[]{
  0, 1, 2, 3, 4, 5, 6, 7,
  1, 2, 3, 4, 5, 6, 7, 15,
  9, 10, 11, 12, 13, 14, 15, 23,
  17, 18, 19, 20, 21, 22, 23, 31,
  25, 26, 27, 28, 29, 30, 31, 39,
  33, 34, 35, 36, 37, 38, 39, 47,
  41, 42, 43, 44, 45, 46, 47, 55,
  49, 50, 51, 52, 53, 54, 55, 63
};

      MoveLeftSquareIndex = new int[]{
  1, 2, 3, 4, 5, 6, 7, 7,
  9, 10, 11, 12, 13, 14, 15, 15,
  17, 18, 19, 20, 21, 22, 23, 23,
  25, 26, 27, 28, 29, 30, 31, 31,
  33, 34, 35, 36, 37, 38, 39, 39,
  41, 42, 43, 44, 45, 46, 47, 47,
  49, 50, 51, 52, 53, 54, 55, 55,
  57, 58, 59, 60, 61, 62, 63, 63
};

      MoveUpLeftSquareIndex = new int[]{
  9, 10, 11, 12, 13, 14, 15, 7,
  17, 18, 19, 20, 21, 22, 23, 15,
  25, 26, 27, 28, 29, 30, 31, 23,
  33, 34, 35, 36, 37, 38, 39, 31,
  41, 42, 43, 44, 45, 46, 47, 39,
  49, 50, 51, 52, 53, 54, 55, 47,
  57, 58, 59, 60, 61, 62, 63, 55,
  56, 57, 58, 59, 60, 61, 62, 63
};

      MoveKnight1SquareIndex = new int[]{
  0, 16, 17, 18, 19, 20, 21, 22,
  8, 24, 25, 26, 27, 28, 29, 30,
  16, 32, 33, 34, 35, 36, 37, 38,
  24, 40, 41, 42, 43, 44, 45, 46,
  32, 48, 49, 50, 51, 52, 53, 54,
  40, 56, 57, 58, 59, 60, 61, 62,
  48, 49, 50, 51, 52, 53, 54, 55,
  56, 57, 58, 59, 60, 61, 62, 63
};

      MoveKnight2SquareIndex = new int[]{
  0, 1, 8, 9, 10, 11, 12, 13,
  8, 9, 16, 17, 18, 19, 20, 21,
  16, 17, 24, 25, 26, 27, 28, 29,
  24, 25, 32, 33, 34, 35, 36, 37,
  32, 33, 40, 41, 42, 43, 44, 45,
  40, 41, 48, 49, 50, 51, 52, 53,
  48, 49, 56, 57, 58, 59, 60, 61,
  56, 57, 58, 59, 60, 61, 62, 63
};

      MoveKnight3SquareIndex = new int[]{
  0, 1, 2, 3, 4, 5, 6, 7,
  8, 9, 0, 1, 2, 3, 4, 5,
  16, 17, 8, 9, 10, 11, 12, 13,
  24, 25, 16, 17, 18, 19, 20, 21,
  32, 33, 24, 25, 26, 27, 28, 29,
  40, 41, 32, 33, 34, 35, 36, 37,
  48, 49, 40, 41, 42, 43, 44, 45,
  56, 57, 48, 49, 50, 51, 52, 53
};

      MoveKnight4SquareIndex = new int[]{
  0, 1, 2, 3, 4, 5, 6, 7,
  8, 9, 10, 11, 12, 13, 14, 15,
  16, 0, 1, 2, 3, 4, 5, 6,
  24, 8, 9, 10, 11, 12, 13, 14,
  32, 16, 17, 18, 19, 20, 21, 22,
  40, 24, 25, 26, 27, 28, 29, 30,
  48, 32, 33, 34, 35, 36, 37, 38,
  56, 40, 41, 42, 43, 44, 45, 46
};

      MoveKnight5SquareIndex = new int[]{
  0, 1, 2, 3, 4, 5, 6, 7,
  8, 9, 10, 11, 12, 13, 14, 15,
  1, 2, 3, 4, 5, 6, 7, 23,
  9, 10, 11, 12, 13, 14, 15, 31,
  17, 18, 19, 20, 21, 22, 23, 39,
  25, 26, 27, 28, 29, 30, 31, 47,
  33, 34, 35, 36, 37, 38, 39, 55,
  41, 42, 43, 44, 45, 46, 47, 63
};

      MoveKnight6SquareIndex = new int[]{
  0, 1, 2, 3, 4, 5, 6, 7,
  2, 3, 4, 5, 6, 7, 14, 15,
  10, 11, 12, 13, 14, 15, 22, 23,
  18, 19, 20, 21, 22, 23, 30, 31,
  26, 27, 28, 29, 30, 31, 38, 39,
  34, 35, 36, 37, 38, 39, 46, 47,
  42, 43, 44, 45, 46, 47, 54, 55,
  50, 51, 52, 53, 54, 55, 62, 63
};

      MoveKnight7SquareIndex = new int[]{
  10, 11, 12, 13, 14, 15, 6, 7,
  18, 19, 20, 21, 22, 23, 14, 15,
  26, 27, 28, 29, 30, 31, 22, 23,
  34, 35, 36, 37, 38, 39, 30, 31,
  42, 43, 44, 45, 46, 47, 38, 39,
  50, 51, 52, 53, 54, 55, 46, 47,
  58, 59, 60, 61, 62, 63, 54, 55,
  56, 57, 58, 59, 60, 61, 62, 63
      };

      MoveKnight8SquareIndex = new int[]{
  17, 18, 19, 20, 21, 22, 23, 7,
  25, 26, 27, 28, 29, 30, 31, 15,
  33, 34, 35, 36, 37, 38, 39, 23,
  41, 42, 43, 44, 45, 46, 47, 31,
  49, 50, 51, 52, 53, 54, 55, 39,
  57, 58, 59, 60, 61, 62, 63, 47,
  48, 49, 50, 51, 52, 53, 54, 55,
  56, 57, 58, 59, 60, 61, 62, 63
    };



    }
  }
}