// This file was generated by a tool; you should avoid making direct changes.
// Consider using 'partial classes' to extend these types
// Input: tensor_slice.proto

#pragma warning disable CS0612, CS1591, CS3021, IDE1006, RCS1036, RCS1057, RCS1085, RCS1192
namespace Tensorflow
{

    [global::ProtoBuf.ProtoContract()]
    public partial class TensorSliceProto : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, Name = @"extent")]
        public global::System.Collections.Generic.List<Extent> Extents { get; } = new global::System.Collections.Generic.List<Extent>();

        [global::ProtoBuf.ProtoContract()]
        public partial class Extent : global::ProtoBuf.IExtensible
        {
            private global::ProtoBuf.IExtension __pbn__extensionData;
            global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
                => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

            [global::ProtoBuf.ProtoMember(1, Name = @"start")]
            public long Start { get; set; }

            [global::ProtoBuf.ProtoMember(2, Name = @"length")]
            public long Length
            {
                get { return __pbn__has_length.Is(2) ? __pbn__has_length.Int64 : default; }
                set { __pbn__has_length = new global::ProtoBuf.DiscriminatedUnion64(2, value); }
            }
            public bool ShouldSerializeLength() => __pbn__has_length.Is(2);
            public void ResetLength() => global::ProtoBuf.DiscriminatedUnion64.Reset(ref __pbn__has_length, 2);

            private global::ProtoBuf.DiscriminatedUnion64 __pbn__has_length;

        }

    }

}

#pragma warning restore CS0612, CS1591, CS3021, IDE1006, RCS1036, RCS1057, RCS1085, RCS1192
